<?xml version="1.0" encoding="utf-8"?>

<!--
// ColorWheel.mxml
//  Ryan Funduk | http://ryanfunduk.com
// 
// Released under MIT License
// http://www.opensource.org/licenses/mit-license.php
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
-->

<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
           backgroundColor="#DDDDDD" x='0' y='0' width="150" cornerRadius="6"
           horizontalScrollPolicy="off" verticalScrollPolicy="off"
           borderStyle="solid" borderThickness="3" borderColor="#CCCCCC"
           creationComplete="init()">

  <mx:Style>
    .ilacSlider { thumbSkin: Embed(source="skins/empty.gif"); }
  </mx:Style>

  <mx:Script><![CDATA[
    import mx.styles.StyleManager;
    import mx.events.ColorPickerEvent;
    import mx.controls.TextInput;
    import flash.geom.Point;
    import com.thenduks.ilac.skins.*;
    import com.thenduks.ilac.IlacUtil;
    
    private var colorWheel:Wheel;
    private var bmd:BitmapData;
    private var cm:ColorMatrix;
    private var radius:Number;

    public var currentColor:Number;
    
    public function position( pos:Point ):void {
      x = pos.x;
      y = pos.y;
    }

    public function set selection( xy:Point ):void {
      getColor( xy.x, xy.y );

      colorPointer.move( xy.x + colorPointer.width / 2,
                         xy.y + colorPointer.height / 2 );
      colorPointer.visible = true;
      updateSaturationSlider();
    }
    public function get selection():Point {
      if( colorPointer.visible ) {
        return new Point( colorPointer.x, colorPointer.y );
      }
      else {
        return new Point( -1, -1 );
      }
    }

    private function draw():void {
      if( !colorWheel ) { return; }
      radius = colorWheelHolder.width / 2;
      colorWheel.graphics.clear();
      colorWheel.draw( radius )
      bmd = new BitmapData( colorWheel.width, colorWheel.height );
      bmd.draw( colorWheel );
    }
    
    private function init():void {
      colorWheel = new Wheel();
      colorWheelHolder.rawChildren.addChild( colorWheel );
      draw();
      addEventListener( MouseEvent.ROLL_OUT, function( e:MouseEvent ):void {
        dispatchEvent( new Event( 'close' ) );
      } );
      colorWheel.addEventListener( MouseEvent.MOUSE_DOWN, mouseHandler );
      colorWheel.addEventListener( MouseEvent.MOUSE_MOVE, mouseHandler );
      setFilters();
    }
    
    private function mouseHandler( event:MouseEvent ):void {
      if( !event.buttonDown ) { return; }
      colorPointer.visible = true;
      var x:Number = event.localX;
      var y:Number = event.localY;
      colorPointer.move( x + colorPointer.width / 2, 
                         y + colorPointer.height / 2 );
      getColor( x, y );
      updateSaturationSlider();
    }
    
    private function getColor( x:Number, y:Number ):void {
      var color:Number = bmd.getPixel( x, y );
      if( !atArea( x, y ) ) { return; }
      cm = new ColorMatrix();
      cm.colorize( color );
      currentColor = color;
      cm.adjustSaturation( saturationSlider.value );
      cm.adjustBrightness( brightnessSlider.value );
      dispatchEvent( new ColorPickerEvent( 'change', false, false, -1, color ) );
    }

    private function updateSaturationSlider():void {
      var newColors:Array = IlacUtil.stringAsArray(
        saturationSlider.getStyle( 'fillColors' )
      );
      saturationSlider.setStyle( 'fillColors',
                                 '[' + newColors[0] + ',' +
                                       currentColor + ']' );
    }
    
    private function saturation():void {
      var c:ColorMatrix = new ColorMatrix();
      c.adjustSaturation( saturationSlider.value );
      colorWheel.filters = [c.filter];
      bmd = new BitmapData( colorWheel.width, colorWheel.height );
      bmd.draw( colorWheel );
      getColor( colorPointer.x, colorPointer.y );
    }
    
    private function brightness():void {
      var c:ColorMatrix = new ColorMatrix();
      c.adjustBrightness( brightnessSlider.value );
      colorWheel.filters = [c.filter];
      bmd = new BitmapData( colorWheel.width, colorWheel.height );
      bmd.draw( colorWheel );
      getColor( colorPointer.x, colorPointer.y );
    }
    
    private function setFilters():void {
      var c:ColorMatrix = new ColorMatrix();
      c.adjustSaturation( saturationSlider.value );
      c.adjustBrightness( brightnessSlider.value );
      colorWheel.filters = [c.filter];
      bmd = new BitmapData( colorWheel.width, colorWheel.height );
      bmd.draw( colorWheel );
      getColor( colorPointer.x, colorPointer.y );
    }
    
    private function atArea( _x:Number, _y:Number ):Boolean {
      var x:Number = _x - radius;
      var y:Number = _y - radius;
      return Math.sqrt( x * x + y * y ) < radius;
    }
    
    private function colorWheelHolderWidth():Number {
      return this.width - colorWheelHolder.x - colorWheelHolder.y -
             (this.getStyle('borderThickness') * 2);
    }
  ]]></mx:Script>
  
  <mx:Canvas  id="colorWheelHolder" resize="draw();" x="5" y="5"
              width="{colorWheelHolderWidth()}" height="{colorWheelHolder.width}" />

  <mx:HSlider id="saturationSlider"
              minimum="0" maximum="2" snapInterval="0.01"
              x="5" y="{colorWheelHolder.height + saturationSlider.height}"
              showDataTip="false" liveDragging="true"
              width="{colorWheelHolder.width}" height="20"
              change="setFilters()"
              styleName="ilacSlider"
              fillColors="[0xAAAAAA, 0xEEEEEE]"
              trackSkin="{HSliderSkin}"
              sliderThumbClass="{SliderThumbSkin}"
              creationComplete="{saturationSlider.value=1.45}" />

  <mx:HSlider id="brightnessSlider"
              minimum="-255" maximum="255" snapInterval="1"
              x="5" y="{colorWheelHolder.height + (saturationSlider.height * 2)}"
              showDataTip="false" liveDragging="true"
              width="{colorWheelHolder.width}" height="30"
              change="setFilters()"
              styleName="ilacSlider"
              fillColors="[0x000000, 0xFFFFFF]"
              trackSkin="{HSliderSkin}"
              sliderThumbClass="{SliderThumbSkin}"
              creationComplete="{brightnessSlider.value=-30}" />
  
  <mx:Canvas  id="colorPointer" width="4" height="4" visible='false'
              borderStyle="solid" borderColor="#363636" mouseEnabled="false" />
</mx:Canvas>
