<?xml version="1.0" encoding="utf-8"?>

<!--
// ColorWheel.mxml
//  Ryan Funduk | http://ryanfunduk.com
//
// Released under MIT License
// http://www.opensource.org/licenses/mit-license.php
//
// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use,
// copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following
// conditions:
//
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
// HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
// WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
// OTHER DEALINGS IN THE SOFTWARE.
-->

<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
		   x="0" y="0" width="150" height="100" borderStyle="none" creationComplete="init()"
		   horizontalScrollPolicy="off" verticalScrollPolicy="off">
	
	

	
	
  <mx:Style>
    .ilacSlider { thumbSkin: Embed(source="skins/empty.gif"); }
  </mx:Style>
	
	<mx:Metadata>
		[Event(name="change", type="mx.events.ColorPickerEvent")]
	</mx:Metadata>

  <mx:Script><![CDATA[
    
    import com.thenduks.ilac.IlacUtil;
    import com.thenduks.ilac.skins.*;
    
    import flash.geom.Point;
    
    import mx.controls.TextInput;
    import mx.events.ColorPickerEvent;
    import mx.styles.StyleManager;
    private static const DEFAULT_SATURATION:Number = 1;
    private static const DEFAULT_BRIGHTNESS:Number = 0;

    private var colorWheel:Wheel;
    private var colorWheelStatic:Wheel;
    private var bmd:BitmapData;
    private var bmdStatic:BitmapData;
    private var cm:ColorMatrix;
    private var radius:Number;
	public var currentColor:uint; //The color chosen from the wheel, or set by selectedColor function.
    public function position( pos:Point ):void {
      x = pos.x;
      y = pos.y;
    }

    public function set selection( xy:Point ):void {
      setCurrentcolor( xy.x, xy.y );

      colorPointer.move( xy.x - colorPointer.width / 2,
                         xy.y - colorPointer.height / 2 );
      colorPointer.visible = true;
	 
      updateBrightnessSlider();
    }
	  
    public function get selection():Point {
      if( colorPointer.visible ) {
        return new Point( colorPointer.x + colorPointer.width / 2, colorPointer.y + colorPointer.width / 2);
      }
      else {
        return new Point( -1, -1 );
      }
    }

    private function draw( cw:Wheel ):void {
      if( !cw ) { return; }
      radius = colorWheelHolder.width / 2;
      cw.graphics.clear();
      cw.draw( radius )
      bmd = new BitmapData( cw.width, cw.height );
      bmd.draw( cw );
    }

    private function init():void {
		
      colorWheelStatic = new Wheel();
      draw( colorWheelStatic );
      var cStatic:ColorMatrix = new ColorMatrix();
      cStatic.adjustSaturation( DEFAULT_SATURATION );
      cStatic.adjustBrightness( DEFAULT_BRIGHTNESS );
      colorWheelStatic.filters = [cStatic.filter];
      bmdStatic = new BitmapData( colorWheelStatic.width,
                                  colorWheelStatic.height );
      bmdStatic.draw( colorWheelStatic );

      colorWheel = new Wheel();
      colorWheelHolder.rawChildren.addChild( colorWheel );
      draw( colorWheel );

      addEventListener( MouseEvent.ROLL_OUT, function( e:MouseEvent ):void {
        dispatchEvent( new Event( 'close' ) );
      } );
      colorWheel.addEventListener( MouseEvent.MOUSE_DOWN, mouseHandler );
      colorWheel.addEventListener( MouseEvent.MOUSE_MOVE, mouseHandler );


	  updateBrightnessSlider();
    }

    private function mouseHandler( event:MouseEvent ):void {
      if( !event.buttonDown ) { return; }
      colorPointer.visible = true;
      var x:Number = event.localX;
      var y:Number = event.localY;
      colorPointer.move( x - colorPointer.width / 2,
                         y - colorPointer.height / 2 );
      setCurrentcolor( x, y );
      updateBrightnessSlider();
	  setFilters();
	  
	  dispatchEvent( new ColorPickerEvent( 'change', false,
		  false, -1, currentColor ) );
    }

    private function setCurrentcolor( x:Number, y:Number ):void {
      var color:Number = colorWheel.getColor(x,y,brightnessSlider.value);
      if( !atArea( x, y ) ) { return; }
	  currentColor = color;
    }

    private function updateBrightnessSlider():void {
		var c:ColorMatrix = new ColorMatrix();
		var hsv:Array = ColorUtil.RGBtoHSV(currentColor);
		var brightness:Number = hsv[2];
		var brightestColor:uint = ColorUtil.toRGBint(ColorUtil.HSVtoRGB(hsv[0], hsv[1], 1));
		brightnessSlider.setStyle( 'fillColors',
			'[' +0 + ',' +
			brightestColor + ']' );
		brightnessSlider.value = brightness;
    }

    private function saturation():void {
      var c:ColorMatrix = new ColorMatrix();
      c.adjustSaturation( saturationSlider.value );
      colorWheel.filters = [c.filter];
      bmd = new BitmapData( colorWheel.width, colorWheel.height );
      bmd.draw( colorWheel );
      setCurrentcolor( colorPointer.x, colorPointer.y );
    }

    private function brightness():void {
      var c:ColorMatrix = new ColorMatrix();
      c.adjustBrightness( brightnessSlider.value );
      colorWheel.filters = [c.filter];
      bmd = new BitmapData( colorWheel.width, colorWheel.height );
      bmd.draw( colorWheel );
      setCurrentcolor( colorPointer.x, colorPointer.y );
    }

    private function setFilters():void {
      var c:ColorMatrix = new ColorMatrix();
      c.adjustSaturation( saturationSlider.value );
      c.adjustBrightness(brightnessSlider.value * 256 - 256);
      colorWheel.filters = [c.filter];
      bmd = new BitmapData( colorWheel.width, colorWheel.height );
      bmd.draw( colorWheel );
    }

    private function atArea( _x:Number, _y:Number ):Boolean {
      var x:Number = _x - radius;
      var y:Number = _y - radius;
      return Math.sqrt( x * x + y * y ) < radius;
    }

	  
	private function sliderChanged(e:Event = null):void{
		var c:ColorMatrix = new ColorMatrix();
		c.adjustSaturation( saturationSlider.value );
		c.adjustBrightness(brightnessSlider.value * 256 - 256);
		
		var hsv:Array = ColorUtil.RGBtoHSV(currentColor);
		var brightness:Number = hsv[2];
		var brightestColor:uint = ColorUtil.toRGBint(ColorUtil.HSVtoRGB(hsv[0], hsv[1], 1));

		var color:uint = c.applyToColor(brightestColor);
		setFilters();
		dispatchEvent( new ColorPickerEvent( 'change', false,
		 false, -1, color ) );
	}
	  
	  public function set selectedColor(color:Number):void
	  {
		  currentColor = color;

		  var pos:Point = colorWheel.getPos(color);
		  colorPointer.move( pos.x - colorPointer.width / 2,
		  pos.y - colorPointer.height / 2 );
		  colorPointer.visible = true;
		 updateBrightnessSlider();
		 setFilters();
/*		 var c:ColorMatrix = new ColorMatrix();
		  c.adjustBrightness(1 / brightness);
		  currentColor = c.applyToColor(color);
		  trace("currentcolor after: " + ColorUtil.toRGB(currentColor));
		  brightnessSlider.setStyle( 'fillColors',
			  '[' +0 + ',' +
			  currentColor + ']' );
		  
		  brightnessSlider.value = brightness;
		  trace("brightness" + brightness ); */
	  }
	  

  ]]></mx:Script>
	<mx:VBox left="10" right="10" horizontalAlign="center" verticalGap="10">
		
	<mx:Canvas width="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
	  <mx:Canvas id="colorWheelHolder" width="100%" height="{colorWheelHolder.width}"
				 horizontalScrollPolicy="off" resize="draw( colorWheel );"
				 verticalScrollPolicy="off"/>
		 
		<mx:Canvas id="colorPointer" visible="false" width="4" height="4" borderColor="#363636"
				   borderStyle="solid" mouseEnabled="false"/>
	  </mx:Canvas>
		
	  <mx:HSlider id="saturationSlider" visible="false" width="90%" height="20"
				  change="sliderChanged()"
				  creationComplete="{saturationSlider.value = DEFAULT_SATURATION}"
				  liveDragging="true" maximum="1" minimum="0" showDataTip="false"
				  sliderThumbClass="{SliderThumbSkin}" snapInterval="0.01" styleName="ilacSlider"
				  trackSkin="{HSliderSkin}">
	  		
	  </mx:HSlider>
	
	  <mx:HSlider id="brightnessSlider" visible="true" width="90%" height="30" change="sliderChanged()"
				  creationComplete="{brightnessSlider.value = DEFAULT_BRIGHTNESS}"
				  liveDragging="true" maximum="1" minimum="0" showDataTip="false"
				  sliderThumbClass="{SliderThumbSkin}" snapInterval="0.01" styleName="ilacSlider"
				  trackSkin="{HSliderSkin}"/>
	</mx:VBox>
	
</mx:Canvas>

